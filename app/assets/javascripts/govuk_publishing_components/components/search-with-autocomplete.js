/* global accessibleAutocomplete, fetch */
//= require accessible-autocomplete/dist/accessible-autocomplete.min.js

window.GOVUK = window.GOVUK || {}
window.GOVUK.Modules = window.GOVUK.Modules || {};

(function (Modules) {
  class SearchWithAutocomplete {
    constructor ($module) {
      this.$module = $module

      this.$originalInput = this.$module.querySelector('input')
      this.$inputWrapper = this.$module.querySelector('.gem-c-search__input-wrapper')
      this.$form = this.$module.closest('form')

      this.source = this.$module.getAttribute('data-source')
      this.sourceKey = this.$module.getAttribute('data-source-key')
    }

    init () {
      if (!this.source || !this.sourceKey) {
        console.warn('search-with-autocomplete: No source/sourceKey provided')
        return
      }

      const configOptions = {
        element: this.$inputWrapper,
        id: this.$originalInput.id,
        name: this.$originalInput.name,
        inputClasses: this.$originalInput.classList,
        defaultValue: this.$originalInput.value,
        showNoOptionsFound: false,
        source: this.getResults,
        onConfirm: this.submitContainingForm,
        templates: {
          suggestion: this.constructSuggestionHTMLString
        }
      }

      accessibleAutocomplete(configOptions)

      // The accessible-autocomplete component is meant to generate a new input element rather than enhancing an existing one, so we need to do some cleanup here.
      const autocompleteInput = this.$inputWrapper.querySelector('.autocomplete__input')
      // Ensure the new input element generated by accessible-autocomplete has the correct type
      autocompleteInput.setAttribute('type', 'search')
      // Remove the original input from the DOM
      this.$originalInput.parentNode.removeChild(this.$originalInput)
    }

    constructSuggestionHTMLString = (result) => {
      const inputValue = this.$inputWrapper.querySelector('input').value
      const regex = new RegExp(`(${inputValue})`, 'gi')
      const matchHTML = result.replace(regex, '<span class="govuk-!-font-weight-regular js-result-match">$1</span>')

      const html = `
        <span class="autocomplete__option-wrapper">
          <span class="autocomplete__option--search-icon"></span>
          <span class="govuk-!-font-weight-bold autocomplete__suggestion-text">${matchHTML}</span>
        </span>
      `

      return html
    }

    getResults = (query, populateResults) => {
      const url = new URL(this.source)
      url.searchParams.set('q', query)
      fetch(url)
        .then(response => response.json())
        .then(data => data[this.sourceKey])
        .then(populateResults)
    }

    submitContainingForm () {
      if (this.$form) {
        this.$form.submit()
      }
    }
  }

  Modules.SearchWithAutocomplete = SearchWithAutocomplete
})(window.GOVUK.Modules)
