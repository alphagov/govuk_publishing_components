<%
  id ||= "govspeak-#{SecureRandom.hex(4)}"

  inverse ||= false
  direction_class = "direction-#{direction}" if local_assigns.include?(:direction)
  disable_youtube_expansions = local_assigns.fetch(:disable_youtube_expansions) if local_assigns.include?(:disable_youtube_expansions)

  classes = []
  classes << direction_class if direction_class
  classes << "disable-youtube" if disable_youtube_expansions
  classes << "gem-c-govspeak--inverse" if inverse
%>

<!--
  uuhh what if as a parameter, the govspeak component took a list of fingerprints for the javascripts of the components that it would use

  there would be an attribute like

  data-components-print = {
    "button": "path/to/asset/button-2390128394edsjfsddsf821.js",
  }

  then in the script for generating the component you would have new thing for 
  (could use template string now because if we arent supporting ie11)

  getTheListOfComponentsUsed

  listOfComponents.forEach(x => {
    `<script type="text/javascript">
      import Component from $

      ???
    </script>`
  })
-->

<div id="<%= id %>" class="gem-c-govspeak govuk-govspeak <%= classes.join(" ") %>" data-module="govspeak">
  <% if local_assigns.include?(:content) %>
    <% if content.html_safe? %>
      <%= content %>
    <% else %>
      <% raise "
        You've passed in unsanitised HTML into the Govspeak component as the
        `content` parameter.

        To fix this use a `do` block with the sanitize method - see
        https://components.publishing.service.gov.uk/component-guide/govspeak/
        for the updated documentation and
        https://github.com/alphagov/govuk_publishing_components/pull/1632/
        for further examples.

        Called from #{caller_locations.find { |l| l.to_s.include?('.erb') }}
        " %>
    <% end %>
  <% elsif block_given? %>
    <%= yield %>
  <% end %>
</div>

<%= javascript_tag nonce: true, type: "module" do -%>
    import Govspeak from "<%= asset_path('govuk_publishing_components/modules/govspeak.js') %>";

    const el = document.querySelector("#<%= id %>");

    const govspeak = new Govspeak(el);

    govspeak.init();
<% end -%>
