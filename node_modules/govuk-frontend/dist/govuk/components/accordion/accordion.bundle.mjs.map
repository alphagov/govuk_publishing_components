{"version":3,"file":"accordion.bundle.mjs","sources":["../../../../src/govuk/common/index.mjs","../../../../src/govuk/common/normalise-dataset.mjs","../../../../src/govuk/errors/index.mjs","../../../../src/govuk/govuk-frontend-component.mjs","../../../../src/govuk/i18n.mjs","../../../../src/govuk/components/accordion/accordion.mjs"],"sourcesContent":["/**\n * Common helpers which do not require polyfill.\n *\n * IMPORTANT: If a helper require a polyfill, please isolate it in its own module\n * so that the polyfill can be properly tree-shaken and does not burden\n * the components that do not need that helper\n */\n\n/**\n * Config flattening function\n *\n * Takes any number of objects, flattens them into namespaced key-value pairs,\n * (e.g. \\{'i18n.showSection': 'Show section'\\}) and combines them together, with\n * greatest priority on the LAST item passed in.\n *\n * @internal\n * @param {...{ [key: string]: unknown }} configObjects - Config object to merge\n * @returns {{ [key: string]: unknown }} A flattened object of key-value pairs.\n */\nexport function mergeConfigs(...configObjects) {\n  /**\n   * Function to take nested objects and flatten them to a dot-separated keyed\n   * object. Doing this means we don't need to do any deep/recursive merging of\n   * each of our objects, nor transform our dataset from a flat list into a\n   * nested object.\n   *\n   * @internal\n   * @param {{ [key: string]: unknown }} configObject - Deeply nested object\n   * @returns {{ [key: string]: unknown }} Flattened object with dot-separated keys\n   */\n  function flattenObject(configObject) {\n    // Prepare an empty return object\n    /** @type {{ [key: string]: unknown }} */\n    const flattenedObject = {}\n\n    /**\n     * Our flattening function, this is called recursively for each level of\n     * depth in the object. At each level we prepend the previous level names to\n     * the key using `prefix`.\n     *\n     * @internal\n     * @param {Partial<{ [key: string]: unknown }>} obj - Object to flatten\n     * @param {string} [prefix] - Optional dot-separated prefix\n     */\n    function flattenLoop(obj, prefix) {\n      for (const [key, value] of Object.entries(obj)) {\n        const prefixedKey = prefix ? `${prefix}.${key}` : key\n\n        // If the value is a nested object, recurse over that too\n        if (value && typeof value === 'object') {\n          flattenLoop(value, prefixedKey)\n        } else {\n          // Otherwise, add this value to our return object\n          flattenedObject[prefixedKey] = value\n        }\n      }\n    }\n\n    // Kick off the recursive loop\n    flattenLoop(configObject)\n    return flattenedObject\n  }\n\n  // Start with an empty object as our base\n  /** @type {{ [key: string]: unknown }} */\n  const formattedConfigObject = {}\n\n  // Loop through each of the passed objects\n  for (const configObject of configObjects) {\n    const obj = flattenObject(configObject)\n\n    // Push their keys one-by-one into formattedConfigObject. Any duplicate\n    // keys will override the existing key with the new value.\n    for (const [key, value] of Object.entries(obj)) {\n      formattedConfigObject[key] = value\n    }\n  }\n\n  return formattedConfigObject\n}\n\n/**\n * Extracts keys starting with a particular namespace from a flattened config\n * object, removing the namespace in the process.\n *\n * @internal\n * @param {{ [key: string]: unknown }} configObject - The object to extract key-value pairs from.\n * @param {string} namespace - The namespace to filter keys with.\n * @returns {{ [key: string]: unknown }} Flattened object with dot-separated key namespace removed\n */\nexport function extractConfigByNamespace(configObject, namespace) {\n  /** @type {{ [key: string]: unknown }} */\n  const newObject = {}\n\n  for (const [key, value] of Object.entries(configObject)) {\n    // Split the key into parts, using . as our namespace separator\n    const keyParts = key.split('.')\n\n    // Check if the first namespace matches the configured namespace\n    if (keyParts[0] === namespace) {\n      // Remove the first item (the namespace) from the parts array,\n      // but only if there is more than one part (we don't want blank keys!)\n      if (keyParts.length > 1) {\n        keyParts.shift()\n      }\n\n      // Join the remaining parts back together\n      const newKey = keyParts.join('.')\n\n      // Add them to our new object\n      newObject[newKey] = value\n    }\n  }\n\n  return newObject\n}\n\n/**\n * Get hash fragment from URL\n *\n * Extract the hash fragment (everything after the hash) from a URL,\n * but not including the hash symbol\n *\n * @private\n * @param {string} url - URL\n * @returns {string | undefined} Fragment from URL, without the hash\n */\nexport function getFragmentFromUrl(url) {\n  if (!url.includes('#')) {\n    return undefined\n  }\n\n  return url.split('#').pop()\n}\n\n/**\n * Get GOV.UK Frontend breakpoint value from CSS custom property\n *\n * @private\n * @param {string} name - Breakpoint name\n * @returns {{ property: string, value?: string }} Breakpoint object\n */\nexport function getBreakpoint(name) {\n  const property = `--govuk-frontend-breakpoint-${name}`\n\n  // Get value from `<html>` with breakpoints on CSS :root\n  const value = window\n    .getComputedStyle(document.documentElement)\n    .getPropertyValue(property)\n\n  return {\n    property,\n    value: value || undefined\n  }\n}\n\n/**\n * Move focus to element\n *\n * Sets tabindex to -1 to make the element programmatically focusable,\n * but removes it on blur as the element doesn't need to be focused again.\n *\n * @private\n * @template {HTMLElement} FocusElement\n * @param {FocusElement} $element - HTML element\n * @param {object} [options] - Handler options\n * @param {function(this: FocusElement): void} [options.onBeforeFocus] - Callback before focus\n * @param {function(this: FocusElement): void} [options.onBlur] - Callback on blur\n */\nexport function setFocus($element, options = {}) {\n  const isFocusable = $element.getAttribute('tabindex')\n\n  if (!isFocusable) {\n    $element.setAttribute('tabindex', '-1')\n  }\n\n  /**\n   * Handle element focus\n   */\n  function onFocus() {\n    $element.addEventListener('blur', onBlur, { once: true })\n  }\n\n  /**\n   * Handle element blur\n   */\n  function onBlur() {\n    options.onBlur?.call($element)\n\n    if (!isFocusable) {\n      $element.removeAttribute('tabindex')\n    }\n  }\n\n  // Add listener to reset element on blur, after focus\n  $element.addEventListener('focus', onFocus, { once: true })\n\n  // Focus element\n  options.onBeforeFocus?.call($element)\n  $element.focus()\n}\n\n/**\n * Checks if GOV.UK Frontend is supported on this page\n *\n * Some browsers will load and run our JavaScript but GOV.UK Frontend\n * won't be supported.\n *\n * @internal\n * @param {HTMLElement | null} [$scope] - HTML element `<body>` checked for browser support\n * @returns {boolean} Whether GOV.UK Frontend is supported on this page\n */\nexport function isSupported($scope = document.body) {\n  if (!$scope) {\n    return false\n  }\n\n  return $scope.classList.contains('govuk-frontend-supported')\n}\n\n/**\n * Validate component config by schema\n *\n * @internal\n * @param {Schema} schema - Config schema\n * @param {{ [key: string]: unknown }} config - Component config\n * @returns {string[]} List of validation errors\n */\nexport function validateConfig(schema, config) {\n  const validationErrors = []\n\n  // Check errors for each schema\n  for (const [name, conditions] of Object.entries(schema)) {\n    const errors = []\n\n    // Check errors for each schema condition\n    for (const { required, errorMessage } of conditions) {\n      if (!required.every((key) => !!config[key])) {\n        errors.push(errorMessage) // Missing config key value\n      }\n    }\n\n    // Check one condition passes or add errors\n    if (name === 'anyOf' && !(conditions.length - errors.length >= 1)) {\n      validationErrors.push(...errors)\n    }\n  }\n\n  return validationErrors\n}\n\n/**\n * Schema for component config\n *\n * @typedef {object} Schema\n * @property {SchemaCondition[]} [anyOf] - List of schema conditions\n */\n\n/**\n * Schema condition for component config\n *\n * @typedef {object} SchemaCondition\n * @property {string[]} required - List of required config fields\n * @property {string} errorMessage - Error message when required config fields not provided\n */\n","/**\n * Normalise string\n *\n * 'If it looks like a duck, and it quacks like a duckâ€¦' ðŸ¦†\n *\n * If the passed value looks like a boolean or a number, convert it to a boolean\n * or number.\n *\n * Designed to be used to convert config passed via data attributes (which are\n * always strings) into something sensible.\n *\n * @internal\n * @param {string | undefined} value - The value to normalise\n * @returns {string | boolean | number | undefined} Normalised data\n */\nexport function normaliseString(value) {\n  if (typeof value !== 'string') {\n    return value\n  }\n\n  const trimmedValue = value.trim()\n\n  if (trimmedValue === 'true') {\n    return true\n  }\n\n  if (trimmedValue === 'false') {\n    return false\n  }\n\n  // Empty / whitespace-only strings are considered finite so we need to check\n  // the length of the trimmed string as well\n  if (trimmedValue.length > 0 && isFinite(Number(trimmedValue))) {\n    return Number(trimmedValue)\n  }\n\n  return value\n}\n\n/**\n * Normalise dataset\n *\n * Loop over an object and normalise each value using normaliseData function\n *\n * @internal\n * @param {DOMStringMap} dataset - HTML element dataset\n * @returns {{ [key: string]: string | boolean | number | undefined }} Normalised dataset\n */\nexport function normaliseDataset(dataset) {\n  /** @type {ReturnType<typeof normaliseDataset>} */\n  const out = {}\n\n  for (const [key, value] of Object.entries(dataset)) {\n    out[key] = normaliseString(value)\n  }\n\n  return out\n}\n","/**\n * GOV.UK Frontend error\n *\n * A base class for `Error`s thrown by GOV.UK Frontend.\n *\n * It is meant to be extended into specific types of errors\n * to be thrown by our code.\n *\n * @example\n * ```js\n * class MissingRootError extends GOVUKFrontendError {\n *   // Setting an explicit name is important as extending the class will not\n *   // set a new `name` on the subclass. The `name` property is important\n *   // to ensure intelligible error names even if the class name gets\n *   // mangled by a minifier\n *   name = \"MissingRootError\"\n * }\n * ```\n * @abstract\n */\nexport class GOVUKFrontendError extends Error {\n  name = 'GOVUKFrontendError'\n}\n\n/**\n * Indicates that GOV.UK Frontend is not supported\n */\nexport class SupportError extends GOVUKFrontendError {\n  name = 'SupportError'\n\n  /**\n   * Checks if GOV.UK Frontend is supported on this page\n   *\n   * @param {HTMLElement | null} [$scope] - HTML element `<body>` checked for browser support\n   */\n  constructor($scope = document.body) {\n    const supportMessage =\n      'noModule' in HTMLScriptElement.prototype\n        ? 'GOV.UK Frontend initialised without `<body class=\"govuk-frontend-supported\">` from template `<script>` snippet'\n        : 'GOV.UK Frontend is not supported in this browser'\n\n    super(\n      $scope\n        ? supportMessage\n        : 'GOV.UK Frontend initialised without `<script type=\"module\">`'\n    )\n  }\n}\n\n/**\n * Indicates that a component has received an illegal configuration\n */\nexport class ConfigError extends GOVUKFrontendError {\n  name = 'ConfigError'\n}\n\n/**\n * Indicates an issue with an element (possibly `null` or `undefined`)\n */\nexport class ElementError extends GOVUKFrontendError {\n  name = 'ElementError'\n\n  /**\n   * @internal\n   * @overload\n   * @param {string} message - Element error message\n   */\n\n  /**\n   * @internal\n   * @overload\n   * @param {ElementErrorOptions} options - Element error options\n   */\n\n  /**\n   * @internal\n   * @param {string | ElementErrorOptions} messageOrOptions - Element error message or options\n   */\n  constructor(messageOrOptions) {\n    let message = typeof messageOrOptions === 'string' ? messageOrOptions : ''\n\n    // Build message from options\n    if (typeof messageOrOptions === 'object') {\n      const { componentName, identifier, element, expectedType } =\n        messageOrOptions\n\n      // Add prefix and identifier\n      message = `${componentName}: ${identifier}`\n\n      // Append reason\n      message += element\n        ? ` is not of type ${expectedType ?? 'HTMLElement'}`\n        : ' not found'\n    }\n\n    super(message)\n  }\n}\n\n/**\n * Element error options\n *\n * @internal\n * @typedef {object} ElementErrorOptions\n * @property {string} componentName - The name of the component throwing the error\n * @property {string} identifier - An identifier that'll let the user understand which element has an error. This is whatever makes the most sense\n * @property {Element | null} [element] - The element in error\n * @property {string} [expectedType] - The type that was expected for the identifier\n */\n","import { isSupported } from './common/index.mjs'\nimport { SupportError } from './errors/index.mjs'\n\n/**\n * Base Component class\n *\n * Centralises the behaviours shared by our components\n *\n * @internal\n * @abstract\n */\nexport class GOVUKFrontendComponent {\n  /**\n   * Constructs a new component, validating that GOV.UK Frontend is supported\n   *\n   * @internal\n   */\n  constructor() {\n    this.checkSupport()\n  }\n\n  /**\n   * Validates whether GOV.UK Frontend is supported\n   *\n   * @private\n   */\n  checkSupport() {\n    if (!isSupported()) {\n      throw new SupportError()\n    }\n  }\n}\n","/**\n * Internal support for selecting messages to render, with placeholder\n * interpolation and locale-aware number formatting and pluralisation\n *\n * @internal\n */\nexport class I18n {\n  translations\n  locale\n\n  /**\n   * @internal\n   * @param {{ [key: string]: unknown }} translations - Key-value pairs of the translation strings to use.\n   * @param {object} [config] - Configuration options for the function.\n   * @param {string | null} [config.locale] - An overriding locale for the PluralRules functionality.\n   */\n  constructor(translations = {}, config = {}) {\n    // Make list of translations available throughout function\n    this.translations = translations\n\n    // The locale to use for PluralRules and NumberFormat\n    this.locale = config.locale ?? (document.documentElement.lang || 'en')\n  }\n\n  /**\n   * The most used function - takes the key for a given piece of UI text and\n   * returns the appropriate string.\n   *\n   * @internal\n   * @param {string} lookupKey - The lookup key of the string to use.\n   * @param {{ [key: string]: unknown }} [options] - Any options passed with the translation string, e.g: for string interpolation.\n   * @returns {string} The appropriate translation string.\n   * @throws {Error} Lookup key required\n   * @throws {Error} Options required for `${}` placeholders\n   */\n  t(lookupKey, options) {\n    if (!lookupKey) {\n      // Print a console error if no lookup key has been provided\n      throw new Error('i18n: lookup key missing')\n    }\n\n    // If the `count` option is set, determine which plural suffix is needed and\n    // change the lookupKey to match. We check to see if it's numeric instead of\n    // falsy, as this could legitimately be 0.\n    if (typeof options?.count === 'number') {\n      // Get the plural suffix\n      lookupKey = `${lookupKey}.${this.getPluralSuffix(\n        lookupKey,\n        options.count\n      )}`\n    }\n\n    // Fetch the translation string for that lookup key\n    const translationString = this.translations[lookupKey]\n\n    if (typeof translationString === 'string') {\n      // Check for ${} placeholders in the translation string\n      if (translationString.match(/%{(.\\S+)}/)) {\n        if (!options) {\n          throw new Error(\n            'i18n: cannot replace placeholders in string if no option data provided'\n          )\n        }\n\n        return this.replacePlaceholders(translationString, options)\n      }\n\n      return translationString\n    }\n\n    // If the key wasn't found in our translations object,\n    // return the lookup key itself as the fallback\n    return lookupKey\n  }\n\n  /**\n   * Takes a translation string with placeholders, and replaces the placeholders\n   * with the provided data\n   *\n   * @internal\n   * @param {string} translationString - The translation string\n   * @param {{ [key: string]: unknown }} options - Any options passed with the translation string, e.g: for string interpolation.\n   * @returns {string} The translation string to output, with $\\{\\} placeholders replaced\n   */\n  replacePlaceholders(translationString, options) {\n    const formatter = Intl.NumberFormat.supportedLocalesOf(this.locale).length\n      ? new Intl.NumberFormat(this.locale)\n      : undefined\n\n    return translationString.replace(\n      /%{(.\\S+)}/g,\n\n      /**\n       * Replace translation string placeholders\n       *\n       * @internal\n       * @param {string} placeholderWithBraces - Placeholder with braces\n       * @param {string} placeholderKey - Placeholder key\n       * @returns {string} Placeholder value\n       */\n      function (placeholderWithBraces, placeholderKey) {\n        if (Object.prototype.hasOwnProperty.call(options, placeholderKey)) {\n          const placeholderValue = options[placeholderKey]\n\n          // If a user has passed `false` as the value for the placeholder\n          // treat it as though the value should not be displayed\n          if (\n            placeholderValue === false ||\n            (typeof placeholderValue !== 'number' &&\n              typeof placeholderValue !== 'string')\n          ) {\n            return ''\n          }\n\n          // If the placeholder's value is a number, localise the number formatting\n          if (typeof placeholderValue === 'number') {\n            return formatter\n              ? formatter.format(placeholderValue)\n              : `${placeholderValue}`\n          }\n\n          return placeholderValue\n        }\n\n        throw new Error(\n          `i18n: no data found to replace ${placeholderWithBraces} placeholder in string`\n        )\n      }\n    )\n  }\n\n  /**\n   * Check to see if the browser supports Intl.PluralRules\n   *\n   * It requires all conditions to be met in order to be supported:\n   * - The implementation of Intl supports PluralRules (NOT true in Safari 10â€“12)\n   * - The browser/OS has plural rules for the current locale (browser dependent)\n   *\n   * {@link https://browsersl.ist/#q=supports+es6-module+and+not+supports+intl-pluralrules}\n   *\n   * @internal\n   * @returns {boolean} Returns true if all conditions are met. Returns false otherwise.\n   */\n  hasIntlPluralRulesSupport() {\n    return Boolean(\n      'PluralRules' in window.Intl &&\n        Intl.PluralRules.supportedLocalesOf(this.locale).length\n    )\n  }\n\n  /**\n   * Get the appropriate suffix for the plural form.\n   *\n   * Uses Intl.PluralRules (or our own fallback implementation) to get the\n   * 'preferred' form to use for the given count.\n   *\n   * Checks that a translation has been provided for that plural form â€“ if it\n   * hasn't, it'll fall back to the 'other' plural form (unless that doesn't exist\n   * either, in which case an error will be thrown)\n   *\n   * @internal\n   * @param {string} lookupKey - The lookup key of the string to use.\n   * @param {number} count - Number used to determine which pluralisation to use.\n   * @returns {PluralRule} The suffix associated with the correct pluralisation for this locale.\n   * @throws {Error} Plural form `.other` required when preferred plural form is missing\n   */\n  getPluralSuffix(lookupKey, count) {\n    // Validate that the number is actually a number.\n    //\n    // Number(count) will turn anything that can't be converted to a Number type\n    // into 'NaN'. isFinite filters out NaN, as it isn't a finite number.\n    count = Number(count)\n    if (!isFinite(count)) {\n      return 'other'\n    }\n\n    // Check to verify that all the requirements for Intl.PluralRules are met.\n    // If so, we can use that instead of our custom implementation. Otherwise,\n    // use the hardcoded fallback.\n    const preferredForm = this.hasIntlPluralRulesSupport()\n      ? new Intl.PluralRules(this.locale).select(count)\n      : this.selectPluralFormUsingFallbackRules(count)\n\n    // Use the correct plural form if provided\n    if (`${lookupKey}.${preferredForm}` in this.translations) {\n      return preferredForm\n      // Fall back to `other` if the plural form is missing, but log a warning\n      // to the console\n    } else if (`${lookupKey}.other` in this.translations) {\n      console.warn(\n        `i18n: Missing plural form \".${preferredForm}\" for \"${this.locale}\" locale. Falling back to \".other\".`\n      )\n\n      return 'other'\n    }\n\n    // If the required `other` plural form is missing, all we can do is error\n    throw new Error(\n      `i18n: Plural form \".other\" is required for \"${this.locale}\" locale`\n    )\n  }\n\n  /**\n   * Get the plural form using our fallback implementation\n   *\n   * This is split out into a separate function to make it easier to test the\n   * fallback behaviour in an environment where Intl.PluralRules exists.\n   *\n   * @internal\n   * @param {number} count - Number used to determine which pluralisation to use.\n   * @returns {PluralRule} The pluralisation form for count in this locale.\n   */\n  selectPluralFormUsingFallbackRules(count) {\n    // Currently our custom code can only handle positive integers, so let's\n    // make sure our number is one of those.\n    count = Math.abs(Math.floor(count))\n\n    const ruleset = this.getPluralRulesForLocale()\n\n    if (ruleset) {\n      return I18n.pluralRules[ruleset](count)\n    }\n\n    return 'other'\n  }\n\n  /**\n   * Work out which pluralisation rules to use for the current locale\n   *\n   * The locale may include a regional indicator (such as en-GB), but we don't\n   * usually care about this part, as pluralisation rules are usually the same\n   * regardless of region. There are exceptions, however, (e.g. Portuguese) so\n   * this searches by both the full and shortened locale codes, just to be sure.\n   *\n   * @internal\n   * @returns {string | undefined} The name of the pluralisation rule to use (a key for one\n   *   of the functions in this.pluralRules)\n   */\n  getPluralRulesForLocale() {\n    const localeShort = this.locale.split('-')[0]\n\n    // Look through the plural rules map to find which `pluralRule` is\n    // appropriate for our current `locale`.\n    for (const pluralRule in I18n.pluralRulesMap) {\n      const languages = I18n.pluralRulesMap[pluralRule]\n      if (languages.includes(this.locale) || languages.includes(localeShort)) {\n        return pluralRule\n      }\n    }\n  }\n\n  /**\n   * Map of plural rules to languages where those rules apply.\n   *\n   * Note: These groups are named for the most dominant or recognisable language\n   * that uses each system. The groupings do not imply that the languages are\n   * related to one another. Many languages have evolved the same systems\n   * independently of one another.\n   *\n   * Code to support more languages can be found in the i18n spike:\n   * {@link https://github.com/alphagov/govuk-frontend/blob/spike-i18n-support/src/govuk/i18n.mjs}\n   *\n   * Languages currently supported:\n   *\n   * Arabic: Arabic (ar)\n   * Chinese: Burmese (my), Chinese (zh), Indonesian (id), Japanese (ja),\n   *   Javanese (jv), Korean (ko), Malay (ms), Thai (th), Vietnamese (vi)\n   * French: Armenian (hy), Bangla (bn), French (fr), Gujarati (gu), Hindi (hi),\n   *   Persian Farsi (fa), Punjabi (pa), Zulu (zu)\n   * German: Afrikaans (af), Albanian (sq), Azerbaijani (az), Basque (eu),\n   *   Bulgarian (bg), Catalan (ca), Danish (da), Dutch (nl), English (en),\n   *   Estonian (et), Finnish (fi), Georgian (ka), German (de), Greek (el),\n   *   Hungarian (hu), Luxembourgish (lb), Norwegian (no), Somali (so),\n   *   Swahili (sw), Swedish (sv), Tamil (ta), Telugu (te), Turkish (tr),\n   *   Urdu (ur)\n   * Irish: Irish Gaelic (ga)\n   * Russian: Russian (ru), Ukrainian (uk)\n   * Scottish: Scottish Gaelic (gd)\n   * Spanish: European Portuguese (pt-PT), Italian (it), Spanish (es)\n   * Welsh: Welsh (cy)\n   *\n   * @internal\n   * @type {{ [key: string]: string[] }}\n   */\n  static pluralRulesMap = {\n    arabic: ['ar'],\n    chinese: ['my', 'zh', 'id', 'ja', 'jv', 'ko', 'ms', 'th', 'vi'],\n    french: ['hy', 'bn', 'fr', 'gu', 'hi', 'fa', 'pa', 'zu'],\n    german: [\n      'af',\n      'sq',\n      'az',\n      'eu',\n      'bg',\n      'ca',\n      'da',\n      'nl',\n      'en',\n      'et',\n      'fi',\n      'ka',\n      'de',\n      'el',\n      'hu',\n      'lb',\n      'no',\n      'so',\n      'sw',\n      'sv',\n      'ta',\n      'te',\n      'tr',\n      'ur'\n    ],\n    irish: ['ga'],\n    russian: ['ru', 'uk'],\n    scottish: ['gd'],\n    spanish: ['pt-PT', 'it', 'es'],\n    welsh: ['cy']\n  }\n\n  /**\n   * Different pluralisation rule sets\n   *\n   * Returns the appropriate suffix for the plural form associated with `n`.\n   * Possible suffixes: 'zero', 'one', 'two', 'few', 'many', 'other' (the actual\n   * meaning of each differs per locale). 'other' should always exist, even in\n   * languages without plurals, such as Chinese.\n   * {@link https://cldr.unicode.org/index/cldr-spec/plural-rules}\n   *\n   * The count must be a positive integer. Negative numbers and decimals aren't accounted for\n   *\n   * @internal\n   * @type {{ [key: string]: (count: number) => PluralRule }}\n   */\n  static pluralRules = {\n    arabic(n) {\n      if (n === 0) {\n        return 'zero'\n      }\n      if (n === 1) {\n        return 'one'\n      }\n      if (n === 2) {\n        return 'two'\n      }\n      if (n % 100 >= 3 && n % 100 <= 10) {\n        return 'few'\n      }\n      if (n % 100 >= 11 && n % 100 <= 99) {\n        return 'many'\n      }\n      return 'other'\n    },\n    chinese() {\n      return 'other'\n    },\n    french(n) {\n      return n === 0 || n === 1 ? 'one' : 'other'\n    },\n    german(n) {\n      return n === 1 ? 'one' : 'other'\n    },\n    irish(n) {\n      if (n === 1) {\n        return 'one'\n      }\n      if (n === 2) {\n        return 'two'\n      }\n      if (n >= 3 && n <= 6) {\n        return 'few'\n      }\n      if (n >= 7 && n <= 10) {\n        return 'many'\n      }\n      return 'other'\n    },\n    russian(n) {\n      const lastTwo = n % 100\n      const last = lastTwo % 10\n      if (last === 1 && lastTwo !== 11) {\n        return 'one'\n      }\n      if (last >= 2 && last <= 4 && !(lastTwo >= 12 && lastTwo <= 14)) {\n        return 'few'\n      }\n      if (\n        last === 0 ||\n        (last >= 5 && last <= 9) ||\n        (lastTwo >= 11 && lastTwo <= 14)\n      ) {\n        return 'many'\n      }\n      // Note: The 'other' suffix is only used by decimal numbers in Russian.\n      // We don't anticipate it being used, but it's here for consistency.\n      return 'other'\n    },\n    scottish(n) {\n      if (n === 1 || n === 11) {\n        return 'one'\n      }\n      if (n === 2 || n === 12) {\n        return 'two'\n      }\n      if ((n >= 3 && n <= 10) || (n >= 13 && n <= 19)) {\n        return 'few'\n      }\n      return 'other'\n    },\n    spanish(n) {\n      if (n === 1) {\n        return 'one'\n      }\n      if (n % 1000000 === 0 && n !== 0) {\n        return 'many'\n      }\n      return 'other'\n    },\n    welsh(n) {\n      if (n === 0) {\n        return 'zero'\n      }\n      if (n === 1) {\n        return 'one'\n      }\n      if (n === 2) {\n        return 'two'\n      }\n      if (n === 3) {\n        return 'few'\n      }\n      if (n === 6) {\n        return 'many'\n      }\n      return 'other'\n    }\n  }\n}\n\n/**\n * Plural rule category mnemonic tags\n *\n * @internal\n * @typedef {'zero' | 'one' | 'two' | 'few' | 'many' | 'other'} PluralRule\n */\n\n/**\n * Translated message by plural rule they correspond to.\n *\n * Allows to group pluralised messages under a single key when passing\n * translations to a component's constructor\n *\n * @internal\n * @typedef {object} TranslationPluralForms\n * @property {string} [other] - General plural form\n * @property {string} [zero] - Plural form used with 0\n * @property {string} [one] - Plural form used with 1\n * @property {string} [two] - Plural form used with 2\n * @property {string} [few] - Plural form used for a few\n * @property {string} [many] - Plural form used for many\n */\n","import { mergeConfigs, extractConfigByNamespace } from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Accordion component\n *\n * This allows a collection of sections to be collapsed by default, showing only\n * their headers. Sections can be expanded or collapsed individually by clicking\n * their headers. A \"Show all sections\" button is also added to the top of the\n * accordion, which switches to \"Hide all sections\" when all the sections are\n * expanded.\n *\n * The state of each section is saved to the DOM via the `aria-expanded`\n * attribute, which also provides accessibility.\n *\n * @preserve\n */\nexport class Accordion extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /**\n   * @private\n   * @type {AccordionConfig}\n   */\n  config\n\n  /** @private */\n  i18n\n\n  /** @private */\n  controlsClass = 'govuk-accordion__controls'\n\n  /** @private */\n  showAllClass = 'govuk-accordion__show-all'\n\n  /** @private */\n  showAllTextClass = 'govuk-accordion__show-all-text'\n\n  /** @private */\n  sectionClass = 'govuk-accordion__section'\n\n  /** @private */\n  sectionExpandedClass = 'govuk-accordion__section--expanded'\n\n  /** @private */\n  sectionButtonClass = 'govuk-accordion__section-button'\n\n  /** @private */\n  sectionHeaderClass = 'govuk-accordion__section-header'\n\n  /** @private */\n  sectionHeadingClass = 'govuk-accordion__section-heading'\n\n  /** @private */\n  sectionHeadingDividerClass = 'govuk-accordion__section-heading-divider'\n\n  /** @private */\n  sectionHeadingTextClass = 'govuk-accordion__section-heading-text'\n\n  /** @private */\n  sectionHeadingTextFocusClass = 'govuk-accordion__section-heading-text-focus'\n\n  /** @private */\n  sectionShowHideToggleClass = 'govuk-accordion__section-toggle'\n\n  /** @private */\n  sectionShowHideToggleFocusClass = 'govuk-accordion__section-toggle-focus'\n\n  /** @private */\n  sectionShowHideTextClass = 'govuk-accordion__section-toggle-text'\n\n  /** @private */\n  upChevronIconClass = 'govuk-accordion-nav__chevron'\n\n  /** @private */\n  downChevronIconClass = 'govuk-accordion-nav__chevron--down'\n\n  /** @private */\n  sectionSummaryClass = 'govuk-accordion__section-summary'\n\n  /** @private */\n  sectionSummaryFocusClass = 'govuk-accordion__section-summary-focus'\n\n  /** @private */\n  sectionContentClass = 'govuk-accordion__section-content'\n\n  /** @private */\n  $sections\n\n  /** @private */\n  browserSupportsSessionStorage = false\n\n  /**\n   * @private\n   * @type {HTMLButtonElement | null}\n   */\n  $showAllButton = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $showAllIcon = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $showAllText = null\n\n  /**\n   * @param {Element | null} $module - HTML element to use for accordion\n   * @param {AccordionConfig} [config] - Accordion config\n   */\n  constructor($module, config = {}) {\n    super()\n\n    if (!($module instanceof HTMLElement)) {\n      throw new ElementError({\n        componentName: 'Accordion',\n        element: $module,\n        identifier: 'Root element (`$module`)'\n      })\n    }\n\n    this.$module = $module\n\n    this.config = mergeConfigs(\n      Accordion.defaults,\n      config,\n      normaliseDataset($module.dataset)\n    )\n\n    this.i18n = new I18n(extractConfigByNamespace(this.config, 'i18n'))\n\n    const $sections = this.$module.querySelectorAll(`.${this.sectionClass}`)\n    if (!$sections.length) {\n      throw new ElementError({\n        componentName: 'Accordion',\n        identifier: `Sections (\\`<div class=\"${this.sectionClass}\">\\`)`\n      })\n    }\n\n    this.$sections = $sections\n    this.browserSupportsSessionStorage = helper.checkForSessionStorage()\n\n    this.initControls()\n    this.initSectionHeaders()\n\n    // See if \"Show all sections\" button text should be updated\n    const areAllSectionsOpen = this.checkIfAllSectionsOpen()\n    this.updateShowAllButton(areAllSectionsOpen)\n  }\n\n  /**\n   * Initialise controls and set attributes\n   *\n   * @private\n   */\n  initControls() {\n    // Create \"Show all\" button and set attributes\n    this.$showAllButton = document.createElement('button')\n    this.$showAllButton.setAttribute('type', 'button')\n    this.$showAllButton.setAttribute('class', this.showAllClass)\n    this.$showAllButton.setAttribute('aria-expanded', 'false')\n\n    // Create icon, add to element\n    this.$showAllIcon = document.createElement('span')\n    this.$showAllIcon.classList.add(this.upChevronIconClass)\n    this.$showAllButton.appendChild(this.$showAllIcon)\n\n    // Create control wrapper and add controls to it\n    const $accordionControls = document.createElement('div')\n    $accordionControls.setAttribute('class', this.controlsClass)\n    $accordionControls.appendChild(this.$showAllButton)\n    this.$module.insertBefore($accordionControls, this.$module.firstChild)\n\n    // Build additional wrapper for Show all toggle text and place after icon\n    this.$showAllText = document.createElement('span')\n    this.$showAllText.classList.add(this.showAllTextClass)\n    this.$showAllButton.appendChild(this.$showAllText)\n\n    // Handle click events on the show/hide all button\n    this.$showAllButton.addEventListener('click', () =>\n      this.onShowOrHideAllToggle()\n    )\n\n    // Handle 'beforematch' events, if the user agent supports them\n    if ('onbeforematch' in document) {\n      document.addEventListener('beforematch', (event) =>\n        this.onBeforeMatch(event)\n      )\n    }\n  }\n\n  /**\n   * Initialise section headers\n   *\n   * @private\n   */\n  initSectionHeaders() {\n    this.$sections.forEach(($section, i) => {\n      const $header = $section.querySelector(`.${this.sectionHeaderClass}`)\n      if (!$header) {\n        throw new ElementError({\n          componentName: 'Accordion',\n          identifier: `Section headers (\\`<div class=\"${this.sectionHeaderClass}\">\\`)`\n        })\n      }\n\n      // Set header attributes\n      this.constructHeaderMarkup($header, i)\n      this.setExpanded(this.isExpanded($section), $section)\n\n      // Handle events\n      $header.addEventListener('click', () => this.onSectionToggle($section))\n\n      // See if there is any state stored in sessionStorage and set the sections\n      // to open or closed.\n      this.setInitialState($section)\n    })\n  }\n\n  /**\n   * Construct section header\n   *\n   * @private\n   * @param {Element} $header - Section header\n   * @param {number} index - Section index\n   */\n  constructHeaderMarkup($header, index) {\n    const $span = $header.querySelector(`.${this.sectionButtonClass}`)\n    const $heading = $header.querySelector(`.${this.sectionHeadingClass}`)\n    const $summary = $header.querySelector(`.${this.sectionSummaryClass}`)\n\n    if (!$heading) {\n      throw new ElementError({\n        componentName: 'Accordion',\n        identifier: `Section heading (\\`.${this.sectionHeadingClass}\\`)`\n      })\n    }\n\n    if (!$span) {\n      throw new ElementError({\n        componentName: 'Accordion',\n        identifier: `Section button placeholder (\\`<span class=\"${this.sectionButtonClass}\">\\`)`\n      })\n    }\n\n    // Create a button element that will replace the\n    // '.govuk-accordion__section-button' span\n    const $button = document.createElement('button')\n    $button.setAttribute('type', 'button')\n    $button.setAttribute(\n      'aria-controls',\n      `${this.$module.id}-content-${index + 1}`\n    )\n\n    // Copy all attributes from $span to $button (except `id`, which gets added\n    // to the `$headingText` element)\n    for (const attr of Array.from($span.attributes)) {\n      if (attr.nodeName !== 'id') {\n        $button.setAttribute(attr.nodeName, `${attr.nodeValue}`)\n      }\n    }\n\n    // Create container for heading text so it can be styled\n    const $headingText = document.createElement('span')\n    $headingText.classList.add(this.sectionHeadingTextClass)\n    // Copy the span ID to the heading text to allow it to be referenced by\n    // `aria-labelledby` on the hidden content area without \"Show this section\"\n    $headingText.id = $span.id\n\n    // Create an inner heading text container to limit the width of the focus\n    // state\n    const $headingTextFocus = document.createElement('span')\n    $headingTextFocus.classList.add(this.sectionHeadingTextFocusClass)\n    $headingText.appendChild($headingTextFocus)\n    // span could contain HTML elements\n    // (see https://www.w3.org/TR/2011/WD-html5-20110525/content-models.html#phrasing-content)\n    $headingTextFocus.innerHTML = $span.innerHTML\n\n    // Create container for show / hide icons and text.\n    const $showHideToggle = document.createElement('span')\n    $showHideToggle.classList.add(this.sectionShowHideToggleClass)\n    // Tell Google not to index the 'show' text as part of the heading. Must be\n    // set on the element before it's added to the DOM.\n    // See https://developers.google.com/search/docs/advanced/robots/robots_meta_tag#data-nosnippet-attr\n    $showHideToggle.setAttribute('data-nosnippet', '')\n    // Create an inner container to limit the width of the focus state\n    const $showHideToggleFocus = document.createElement('span')\n    $showHideToggleFocus.classList.add(this.sectionShowHideToggleFocusClass)\n    $showHideToggle.appendChild($showHideToggleFocus)\n    // Create wrapper for the show / hide text. Append text after the show/hide icon\n    const $showHideText = document.createElement('span')\n    const $showHideIcon = document.createElement('span')\n    $showHideIcon.classList.add(this.upChevronIconClass)\n    $showHideToggleFocus.appendChild($showHideIcon)\n    $showHideText.classList.add(this.sectionShowHideTextClass)\n    $showHideToggleFocus.appendChild($showHideText)\n\n    // Append elements to the button:\n    // 1. Heading text\n    // 2. Punctuation\n    // 3. (Optional: Summary line followed by punctuation)\n    // 4. Show / hide toggle\n    $button.appendChild($headingText)\n    $button.appendChild(this.getButtonPunctuationEl())\n\n    // If summary content exists add to DOM in correct order\n    if ($summary?.parentNode) {\n      // Create a new `span` element and copy the summary line content from the\n      // original `div` to the new `span`. This is because the summary line text\n      // is now inside a button element, which can only contain phrasing\n      // content.\n      const $summarySpan = document.createElement('span')\n      // Create an inner summary container to limit the width of the summary\n      // focus state\n      const $summarySpanFocus = document.createElement('span')\n      $summarySpanFocus.classList.add(this.sectionSummaryFocusClass)\n      $summarySpan.appendChild($summarySpanFocus)\n\n      // Get original attributes, and pass them to the replacement\n      for (const attr of Array.from($summary.attributes)) {\n        $summarySpan.setAttribute(attr.nodeName, `${attr.nodeValue}`)\n      }\n\n      // Copy original contents of summary to the new summary span\n      $summarySpanFocus.innerHTML = $summary.innerHTML\n\n      // Replace the original summary `div` with the new summary `span`\n      $summary.parentNode.replaceChild($summarySpan, $summary)\n\n      $button.appendChild($summarySpan)\n      $button.appendChild(this.getButtonPunctuationEl())\n    }\n\n    $button.appendChild($showHideToggle)\n\n    $heading.removeChild($span)\n    $heading.appendChild($button)\n  }\n\n  /**\n   * When a section is opened by the user agent via the 'beforematch' event\n   *\n   * @private\n   * @param {Event} event - Generic event\n   */\n  onBeforeMatch(event) {\n    const $fragment = event.target\n\n    // Handle elements with `.closest()` support only\n    if (!($fragment instanceof Element)) {\n      return\n    }\n\n    // Handle when fragment is inside section\n    const $section = $fragment.closest(`.${this.sectionClass}`)\n    if ($section) {\n      this.setExpanded(true, $section)\n    }\n  }\n\n  /**\n   * When section toggled, set and store state\n   *\n   * @private\n   * @param {Element} $section - Section element\n   */\n  onSectionToggle($section) {\n    const expanded = this.isExpanded($section)\n    this.setExpanded(!expanded, $section)\n\n    // Store the state in sessionStorage when a change is triggered\n    this.storeState($section)\n  }\n\n  /**\n   * When Open/Close All toggled, set and store state\n   *\n   * @private\n   */\n  onShowOrHideAllToggle() {\n    const nowExpanded = !this.checkIfAllSectionsOpen()\n\n    this.$sections.forEach(($section) => {\n      this.setExpanded(nowExpanded, $section)\n      this.storeState($section)\n    })\n\n    this.updateShowAllButton(nowExpanded)\n  }\n\n  /**\n   * Set section attributes when opened/closed\n   *\n   * @private\n   * @param {boolean} expanded - Section expanded\n   * @param {Element} $section - Section element\n   */\n  setExpanded(expanded, $section) {\n    const $showHideIcon = $section.querySelector(`.${this.upChevronIconClass}`)\n    const $showHideText = $section.querySelector(\n      `.${this.sectionShowHideTextClass}`\n    )\n    const $button = $section.querySelector(`.${this.sectionButtonClass}`)\n    const $content = $section.querySelector(`.${this.sectionContentClass}`)\n\n    if (!$content) {\n      throw new ElementError({\n        componentName: 'Accordion',\n        identifier: `Section content (\\`<div class=\"${this.sectionContentClass}\">\\`)`\n      })\n    }\n\n    if (!$showHideIcon || !$showHideText || !$button) {\n      // Return early for elements we create\n      return\n    }\n\n    const newButtonText = expanded\n      ? this.i18n.t('hideSection')\n      : this.i18n.t('showSection')\n\n    $showHideText.textContent = newButtonText\n    $button.setAttribute('aria-expanded', `${expanded}`)\n\n    // Update aria-label combining\n    const ariaLabelParts = []\n\n    const $headingText = $section.querySelector(\n      `.${this.sectionHeadingTextClass}`\n    )\n    if ($headingText) {\n      ariaLabelParts.push(`${$headingText.textContent}`.trim())\n    }\n\n    const $summary = $section.querySelector(`.${this.sectionSummaryClass}`)\n    if ($summary) {\n      ariaLabelParts.push(`${$summary.textContent}`.trim())\n    }\n\n    const ariaLabelMessage = expanded\n      ? this.i18n.t('hideSectionAriaLabel')\n      : this.i18n.t('showSectionAriaLabel')\n    ariaLabelParts.push(ariaLabelMessage)\n\n    /*\n     * Join with a comma to add pause for assistive technology.\n     * Example: [heading]Section A ,[pause] Show this section.\n     * https://accessibility.blog.gov.uk/2017/12/18/what-working-on-gov-uk-navigation-taught-us-about-accessibility/\n     */\n    $button.setAttribute('aria-label', ariaLabelParts.join(' , '))\n\n    // Swap icon, change class\n    if (expanded) {\n      $content.removeAttribute('hidden')\n      $section.classList.add(this.sectionExpandedClass)\n      $showHideIcon.classList.remove(this.downChevronIconClass)\n    } else {\n      $content.setAttribute('hidden', 'until-found')\n      $section.classList.remove(this.sectionExpandedClass)\n      $showHideIcon.classList.add(this.downChevronIconClass)\n    }\n\n    // See if \"Show all sections\" button text should be updated\n    const areAllSectionsOpen = this.checkIfAllSectionsOpen()\n    this.updateShowAllButton(areAllSectionsOpen)\n  }\n\n  /**\n   * Get state of section\n   *\n   * @private\n   * @param {Element} $section - Section element\n   * @returns {boolean} True if expanded\n   */\n  isExpanded($section) {\n    return $section.classList.contains(this.sectionExpandedClass)\n  }\n\n  /**\n   * Check if all sections are open\n   *\n   * @private\n   * @returns {boolean} True if all sections are open\n   */\n  checkIfAllSectionsOpen() {\n    const sectionsCount = this.$sections.length\n    const expandedSectionCount = this.$module.querySelectorAll(\n      `.${this.sectionExpandedClass}`\n    ).length\n    const areAllSectionsOpen = sectionsCount === expandedSectionCount\n\n    return areAllSectionsOpen\n  }\n\n  /**\n   * Update \"Show all sections\" button\n   *\n   * @private\n   * @param {boolean} expanded - Section expanded\n   */\n  updateShowAllButton(expanded) {\n    if (!this.$showAllButton || !this.$showAllText || !this.$showAllIcon) {\n      return\n    }\n\n    this.$showAllButton.setAttribute('aria-expanded', expanded.toString())\n    this.$showAllText.textContent = expanded\n      ? this.i18n.t('hideAllSections')\n      : this.i18n.t('showAllSections')\n    this.$showAllIcon.classList.toggle(this.downChevronIconClass, !expanded)\n  }\n\n  /**\n   * Set the state of the accordions in sessionStorage\n   *\n   * @private\n   * @param {Element} $section - Section element\n   */\n  storeState($section) {\n    if (this.browserSupportsSessionStorage && this.config.rememberExpanded) {\n      // We need a unique way of identifying each content in the Accordion.\n      // Since an `#id` should be unique and an `id` is required for `aria-`\n      // attributes `id` can be safely used.\n      const $button = $section.querySelector(`.${this.sectionButtonClass}`)\n\n      if ($button) {\n        const contentId = $button.getAttribute('aria-controls')\n        const contentState = $button.getAttribute('aria-expanded')\n\n        // Only set the state when both `contentId` and `contentState` are taken\n        // from the DOM.\n        if (contentId && contentState) {\n          window.sessionStorage.setItem(contentId, contentState)\n        }\n      }\n    }\n  }\n\n  /**\n   * Read the state of the accordions from sessionStorage\n   *\n   * @private\n   * @param {Element} $section - Section element\n   */\n  setInitialState($section) {\n    if (this.browserSupportsSessionStorage && this.config.rememberExpanded) {\n      const $button = $section.querySelector(`.${this.sectionButtonClass}`)\n\n      if ($button) {\n        const contentId = $button.getAttribute('aria-controls')\n        const contentState = contentId\n          ? window.sessionStorage.getItem(contentId)\n          : null\n\n        if (contentState !== null) {\n          this.setExpanded(contentState === 'true', $section)\n        }\n      }\n    }\n  }\n\n  /**\n   * Create an element to improve semantics of the section button with\n   * punctuation\n   *\n   * Adding punctuation to the button can also improve its general semantics by\n   * dividing its contents into thematic chunks. See\n   * https://github.com/alphagov/govuk-frontend/issues/2327#issuecomment-922957442\n   *\n   * @private\n   * @returns {Element} DOM element\n   */\n  getButtonPunctuationEl() {\n    const $punctuationEl = document.createElement('span')\n    $punctuationEl.classList.add(\n      'govuk-visually-hidden',\n      this.sectionHeadingDividerClass\n    )\n    $punctuationEl.innerHTML = ', '\n    return $punctuationEl\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-accordion'\n\n  /**\n   * Accordion default config\n   *\n   * @see {@link AccordionConfig}\n   * @constant\n   * @type {AccordionConfig}\n   */\n  static defaults = Object.freeze({\n    i18n: {\n      hideAllSections: 'Hide all sections',\n      hideSection: 'Hide',\n      hideSectionAriaLabel: 'Hide this section',\n      showAllSections: 'Show all sections',\n      showSection: 'Show',\n      showSectionAriaLabel: 'Show this section'\n    },\n    rememberExpanded: true\n  })\n}\n\nconst helper = {\n  /**\n   * Check for `window.sessionStorage`, and that it actually works.\n   *\n   * @returns {boolean} True if session storage is available\n   */\n  checkForSessionStorage: function () {\n    const testString = 'this is the test string'\n    let result\n    try {\n      window.sessionStorage.setItem(testString, testString)\n      result =\n        window.sessionStorage.getItem(testString) === testString.toString()\n      window.sessionStorage.removeItem(testString)\n      return result\n    } catch (exception) {\n      return false\n    }\n  }\n}\n\n/**\n * Accordion config\n *\n * @see {@link Accordion.defaults}\n * @typedef {object} AccordionConfig\n * @property {AccordionTranslations} [i18n=Accordion.defaults.i18n] - Accordion translations\n * @property {boolean} [rememberExpanded] - Whether the expanded and collapsed\n *   state of each section is remembered and restored when navigating.\n */\n\n/**\n * Accordion translations\n *\n * @see {@link Accordion.defaults.i18n}\n * @typedef {object} AccordionTranslations\n *\n * Messages used by the component for the labels of its buttons. This includes\n * the visible text shown on screen, and text to help assistive technology users\n * for the buttons toggling each section.\n * @property {string} [hideAllSections] - The text content for the 'Hide all\n *   sections' button, used when at least one section is expanded.\n * @property {string} [hideSection] - The text content for the 'Hide'\n *   button, used when a section is expanded.\n * @property {string} [hideSectionAriaLabel] - The text content appended to the\n *   'Hide' button's accessible name when a section is expanded.\n * @property {string} [showAllSections] - The text content for the 'Show all\n *   sections' button, used when all sections are collapsed.\n * @property {string} [showSection] - The text content for the 'Show'\n *   button, used when a section is collapsed.\n * @property {string} [showSectionAriaLabel] - The text content appended to the\n *   'Show' button's accessible name when a section is expanded.\n */\n"],"names":["mergeConfigs","configObjects","flattenObject","configObject","flattenedObject","flattenLoop","obj","prefix","key","value","Object","entries","prefixedKey","formattedConfigObject","extractConfigByNamespace","namespace","newObject","keyParts","split","length","shift","newKey","join","isSupported","$scope","document","body","classList","contains","normaliseString","trimmedValue","trim","isFinite","Number","normaliseDataset","dataset","out","GOVUKFrontendError","Error","constructor","args","name","SupportError","supportMessage","HTMLScriptElement","prototype","ElementError","messageOrOptions","message","componentName","identifier","element","expectedType","GOVUKFrontendComponent","checkSupport","I18n","translations","config","_config$locale","locale","documentElement","lang","t","lookupKey","options","count","getPluralSuffix","translationString","match","replacePlaceholders","formatter","Intl","NumberFormat","supportedLocalesOf","undefined","replace","placeholderWithBraces","placeholderKey","hasOwnProperty","call","placeholderValue","format","hasIntlPluralRulesSupport","Boolean","window","PluralRules","preferredForm","select","selectPluralFormUsingFallbackRules","console","warn","Math","abs","floor","ruleset","getPluralRulesForLocale","pluralRules","localeShort","pluralRule","pluralRulesMap","languages","includes","arabic","chinese","french","german","irish","russian","scottish","spanish","welsh","n","lastTwo","last","Accordion","$module","i18n","controlsClass","showAllClass","showAllTextClass","sectionClass","sectionExpandedClass","sectionButtonClass","sectionHeaderClass","sectionHeadingClass","sectionHeadingDividerClass","sectionHeadingTextClass","sectionHeadingTextFocusClass","sectionShowHideToggleClass","sectionShowHideToggleFocusClass","sectionShowHideTextClass","upChevronIconClass","downChevronIconClass","sectionSummaryClass","sectionSummaryFocusClass","sectionContentClass","$sections","browserSupportsSessionStorage","$showAllButton","$showAllIcon","$showAllText","HTMLElement","defaults","querySelectorAll","helper","checkForSessionStorage","initControls","initSectionHeaders","areAllSectionsOpen","checkIfAllSectionsOpen","updateShowAllButton","createElement","setAttribute","add","appendChild","$accordionControls","insertBefore","firstChild","addEventListener","onShowOrHideAllToggle","event","onBeforeMatch","forEach","$section","i","$header","querySelector","constructHeaderMarkup","setExpanded","isExpanded","onSectionToggle","setInitialState","index","$span","$heading","$summary","$button","id","attr","Array","from","attributes","nodeName","nodeValue","$headingText","$headingTextFocus","innerHTML","$showHideToggle","$showHideToggleFocus","$showHideText","$showHideIcon","getButtonPunctuationEl","parentNode","$summarySpan","$summarySpanFocus","replaceChild","removeChild","$fragment","target","Element","closest","expanded","storeState","nowExpanded","$content","newButtonText","textContent","ariaLabelParts","push","ariaLabelMessage","removeAttribute","remove","sectionsCount","expandedSectionCount","toString","toggle","rememberExpanded","contentId","getAttribute","contentState","sessionStorage","setItem","getItem","$punctuationEl","moduleName","freeze","hideAllSections","hideSection","hideSectionAriaLabel","showAllSections","showSection","showSectionAriaLabel","testString","result","removeItem","exception"],"mappings":"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"}