{"version":3,"file":"notification-banner.bundle.js","sources":["../../../../src/govuk/common/index.mjs","../../../../src/govuk/common/normalise-dataset.mjs","../../../../src/govuk/errors/index.mjs","../../../../src/govuk/govuk-frontend-component.mjs","../../../../src/govuk/components/notification-banner/notification-banner.mjs"],"sourcesContent":["/**\n * Common helpers which do not require polyfill.\n *\n * IMPORTANT: If a helper require a polyfill, please isolate it in its own module\n * so that the polyfill can be properly tree-shaken and does not burden\n * the components that do not need that helper\n */\n\n/**\n * Config flattening function\n *\n * Takes any number of objects, flattens them into namespaced key-value pairs,\n * (e.g. \\{'i18n.showSection': 'Show section'\\}) and combines them together, with\n * greatest priority on the LAST item passed in.\n *\n * @internal\n * @param {...{ [key: string]: unknown }} configObjects - Config object to merge\n * @returns {{ [key: string]: unknown }} A flattened object of key-value pairs.\n */\nexport function mergeConfigs(...configObjects) {\n  /**\n   * Function to take nested objects and flatten them to a dot-separated keyed\n   * object. Doing this means we don't need to do any deep/recursive merging of\n   * each of our objects, nor transform our dataset from a flat list into a\n   * nested object.\n   *\n   * @internal\n   * @param {{ [key: string]: unknown }} configObject - Deeply nested object\n   * @returns {{ [key: string]: unknown }} Flattened object with dot-separated keys\n   */\n  function flattenObject(configObject) {\n    // Prepare an empty return object\n    /** @type {{ [key: string]: unknown }} */\n    const flattenedObject = {}\n\n    /**\n     * Our flattening function, this is called recursively for each level of\n     * depth in the object. At each level we prepend the previous level names to\n     * the key using `prefix`.\n     *\n     * @internal\n     * @param {Partial<{ [key: string]: unknown }>} obj - Object to flatten\n     * @param {string} [prefix] - Optional dot-separated prefix\n     */\n    function flattenLoop(obj, prefix) {\n      for (const [key, value] of Object.entries(obj)) {\n        const prefixedKey = prefix ? `${prefix}.${key}` : key\n\n        // If the value is a nested object, recurse over that too\n        if (value && typeof value === 'object') {\n          flattenLoop(value, prefixedKey)\n        } else {\n          // Otherwise, add this value to our return object\n          flattenedObject[prefixedKey] = value\n        }\n      }\n    }\n\n    // Kick off the recursive loop\n    flattenLoop(configObject)\n    return flattenedObject\n  }\n\n  // Start with an empty object as our base\n  /** @type {{ [key: string]: unknown }} */\n  const formattedConfigObject = {}\n\n  // Loop through each of the passed objects\n  for (const configObject of configObjects) {\n    const obj = flattenObject(configObject)\n\n    // Push their keys one-by-one into formattedConfigObject. Any duplicate\n    // keys will override the existing key with the new value.\n    for (const [key, value] of Object.entries(obj)) {\n      formattedConfigObject[key] = value\n    }\n  }\n\n  return formattedConfigObject\n}\n\n/**\n * Extracts keys starting with a particular namespace from a flattened config\n * object, removing the namespace in the process.\n *\n * @internal\n * @param {{ [key: string]: unknown }} configObject - The object to extract key-value pairs from.\n * @param {string} namespace - The namespace to filter keys with.\n * @returns {{ [key: string]: unknown }} Flattened object with dot-separated key namespace removed\n */\nexport function extractConfigByNamespace(configObject, namespace) {\n  /** @type {{ [key: string]: unknown }} */\n  const newObject = {}\n\n  for (const [key, value] of Object.entries(configObject)) {\n    // Split the key into parts, using . as our namespace separator\n    const keyParts = key.split('.')\n\n    // Check if the first namespace matches the configured namespace\n    if (keyParts[0] === namespace) {\n      // Remove the first item (the namespace) from the parts array,\n      // but only if there is more than one part (we don't want blank keys!)\n      if (keyParts.length > 1) {\n        keyParts.shift()\n      }\n\n      // Join the remaining parts back together\n      const newKey = keyParts.join('.')\n\n      // Add them to our new object\n      newObject[newKey] = value\n    }\n  }\n\n  return newObject\n}\n\n/**\n * Get hash fragment from URL\n *\n * Extract the hash fragment (everything after the hash) from a URL,\n * but not including the hash symbol\n *\n * @private\n * @param {string} url - URL\n * @returns {string | undefined} Fragment from URL, without the hash\n */\nexport function getFragmentFromUrl(url) {\n  if (url.indexOf('#') === -1) {\n    return undefined\n  }\n\n  return url.split('#').pop()\n}\n\n/**\n * Checks if GOV.UK Frontend is supported on this page\n *\n * Some browsers will load and run our JavaScript but GOV.UK Frontend\n * won't be supported.\n *\n * @internal\n * @param {HTMLElement | null} [$scope] - HTML element `<body>` checked for browser support\n * @returns {boolean} Whether GOV.UK Frontend is supported on this page\n */\nexport function isSupported($scope = document.body) {\n  if (!$scope) {\n    return false\n  }\n\n  return $scope.classList.contains('govuk-frontend-supported')\n}\n\n/**\n * Validate component config by schema\n *\n * @internal\n * @param {Schema} schema - Config schema\n * @param {{ [key: string]: unknown }} config - Component config\n * @returns {string[]} List of validation errors\n */\nexport function validateConfig(schema, config) {\n  const validationErrors = []\n\n  // Check errors for each schema\n  for (const [name, conditions] of Object.entries(schema)) {\n    const errors = []\n\n    // Check errors for each schema condition\n    for (const { required, errorMessage } of conditions) {\n      if (!required.every((key) => !!config[key])) {\n        errors.push(errorMessage) // Missing config key value\n      }\n    }\n\n    // Check one condition passes or add errors\n    if (name === 'anyOf' && !(conditions.length - errors.length >= 1)) {\n      validationErrors.push(...errors)\n    }\n  }\n\n  return validationErrors\n}\n\n/**\n * Schema for component config\n *\n * @typedef {object} Schema\n * @property {SchemaCondition[]} [anyOf] - List of schema conditions\n */\n\n/**\n * Schema condition for component config\n *\n * @typedef {object} SchemaCondition\n * @property {string[]} required - List of required config fields\n * @property {string} errorMessage - Error message when required config fields not provided\n */\n","/**\n * Normalise string\n *\n * 'If it looks like a duck, and it quacks like a duckâ€¦' ðŸ¦†\n *\n * If the passed value looks like a boolean or a number, convert it to a boolean\n * or number.\n *\n * Designed to be used to convert config passed via data attributes (which are\n * always strings) into something sensible.\n *\n * @internal\n * @param {string | undefined} value - The value to normalise\n * @returns {string | boolean | number | undefined} Normalised data\n */\nexport function normaliseString(value) {\n  if (typeof value !== 'string') {\n    return value\n  }\n\n  const trimmedValue = value.trim()\n\n  if (trimmedValue === 'true') {\n    return true\n  }\n\n  if (trimmedValue === 'false') {\n    return false\n  }\n\n  // Empty / whitespace-only strings are considered finite so we need to check\n  // the length of the trimmed string as well\n  if (trimmedValue.length > 0 && isFinite(Number(trimmedValue))) {\n    return Number(trimmedValue)\n  }\n\n  return value\n}\n\n/**\n * Normalise dataset\n *\n * Loop over an object and normalise each value using normaliseData function\n *\n * @internal\n * @param {DOMStringMap} dataset - HTML element dataset\n * @returns {{ [key: string]: string | boolean | number | undefined }} Normalised dataset\n */\nexport function normaliseDataset(dataset) {\n  /** @type {ReturnType<typeof normaliseDataset>} */\n  const out = {}\n\n  for (const [key, value] of Object.entries(dataset)) {\n    out[key] = normaliseString(value)\n  }\n\n  return out\n}\n","/**\n * GOV.UK Frontend error\n *\n * A base class for `Error`s thrown by GOV.UK Frontend.\n *\n * It is meant to be extended into specific types of errors\n * to be thrown by our code.\n *\n * @example\n * ```js\n * class MissingRootError extends GOVUKFrontendError {\n *   // Setting an explicit name is important as extending the class will not\n *   // set a new `name` on the subclass. The `name` property is important\n *   // to ensure intelligible error names even if the class name gets\n *   // mangled by a minifier\n *   name = \"MissingRootError\"\n * }\n * ```\n * @abstract\n */\nexport class GOVUKFrontendError extends Error {\n  name = 'GOVUKFrontendError'\n}\n\n/**\n * Indicates that GOV.UK Frontend is not supported\n */\nexport class SupportError extends GOVUKFrontendError {\n  name = 'SupportError'\n\n  /**\n   * Checks if GOV.UK Frontend is supported on this page\n   *\n   * @param {HTMLElement | null} [$scope] - HTML element `<body>` checked for browser support\n   */\n  constructor($scope = document.body) {\n    super(\n      $scope\n        ? 'GOV.UK Frontend is not supported in this browser'\n        : 'GOV.UK Frontend initialised without `<script type=\"module\">`'\n    )\n  }\n}\n\n/**\n * Indicates that a component has received an illegal configuration\n */\nexport class ConfigError extends GOVUKFrontendError {\n  name = 'ConfigError'\n}\n\n/**\n * Indicates an issue with an element (possibly `null` or `undefined`)\n */\nexport class ElementError extends GOVUKFrontendError {\n  name = 'ElementError'\n\n  /**\n   * @internal\n   * @overload\n   * @param {string} message - Element error message\n   */\n\n  /**\n   * @internal\n   * @overload\n   * @param {ElementErrorOptions} options - Element error options\n   */\n\n  /**\n   * @internal\n   * @param {string | ElementErrorOptions} messageOrOptions - Element error message or options\n   */\n  constructor(messageOrOptions) {\n    let message = typeof messageOrOptions === 'string' ? messageOrOptions : ''\n\n    // Build message from options\n    if (typeof messageOrOptions === 'object') {\n      const { componentName, identifier, element, expectedType } =\n        messageOrOptions\n\n      // Add prefix and identifier\n      message = `${componentName}: ${identifier}`\n\n      // Append reason\n      message += element\n        ? ` is not of type ${expectedType || 'HTMLElement'}`\n        : ' not found'\n    }\n\n    super(message)\n  }\n}\n\n/**\n * Element error options\n *\n * @internal\n * @typedef {object} ElementErrorOptions\n * @property {string} componentName - The name of the component throwing the error\n * @property {string} identifier - An identifier that'll let the user understand which element has an error. This is whatever makes the most sense\n * @property {Element | null} [element] - The element in error\n * @property {string} [expectedType] - The type that was expected for the identifier\n */\n","import { isSupported } from './common/index.mjs'\nimport { SupportError } from './errors/index.mjs'\n\n/**\n * Base Component class\n *\n * Centralises the behaviours shared by our components\n *\n * @internal\n * @abstract\n */\nexport class GOVUKFrontendComponent {\n  /**\n   * Constructs a new component, validating that GOV.UK Frontend is supported\n   *\n   * @internal\n   */\n  constructor() {\n    this.checkSupport()\n  }\n\n  /**\n   * Validates whether GOV.UK Frontend is supported\n   *\n   * @private\n   */\n  checkSupport() {\n    if (!isSupported()) {\n      throw new SupportError()\n    }\n  }\n}\n","import { mergeConfigs } from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\n\n/**\n * Notification Banner component\n *\n * @preserve\n */\nexport class NotificationBanner extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /**\n   * @private\n   * @type {NotificationBannerConfig}\n   */\n  config\n\n  /**\n   * @param {Element | null} $module - HTML element to use for notification banner\n   * @param {NotificationBannerConfig} [config] - Notification banner config\n   */\n  constructor($module, config = {}) {\n    super()\n\n    if (!($module instanceof HTMLElement)) {\n      throw new ElementError({\n        componentName: 'Notification banner',\n        element: $module,\n        identifier: 'Root element (`$module`)'\n      })\n    }\n\n    this.$module = $module\n\n    this.config = mergeConfigs(\n      NotificationBanner.defaults,\n      config,\n      normaliseDataset($module.dataset)\n    )\n\n    this.setFocus()\n  }\n\n  /**\n   * Focus the element\n   *\n   * If `role=\"alert\"` is set, focus the element to help some assistive\n   * technologies prioritise announcing it.\n   *\n   * You can turn off the auto-focus functionality by setting\n   * `data-disable-auto-focus=\"true\"` in the component HTML. You might wish to\n   * do this based on user research findings, or to avoid a clash with another\n   * element which should be focused when the page loads.\n   *\n   * @private\n   */\n  setFocus() {\n    if (this.config.disableAutoFocus) {\n      return\n    }\n\n    if (this.$module.getAttribute('role') !== 'alert') {\n      return\n    }\n\n    // Set tabindex to -1 to make the element focusable with JavaScript. Remove\n    // the tabindex on blur as the component doesn't need to be focusable after\n    // the page has loaded.\n    if (!this.$module.getAttribute('tabindex')) {\n      this.$module.setAttribute('tabindex', '-1')\n\n      this.$module.addEventListener('blur', () => {\n        this.$module.removeAttribute('tabindex')\n      })\n    }\n\n    this.$module.focus()\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-notification-banner'\n\n  /**\n   * Notification banner default config\n   *\n   * @see {@link NotificationBannerConfig}\n   * @constant\n   * @type {NotificationBannerConfig}\n   */\n  static defaults = Object.freeze({\n    disableAutoFocus: false\n  })\n}\n\n/**\n * Notification banner config\n *\n * @typedef {object} NotificationBannerConfig\n * @property {boolean} [disableAutoFocus=false] - If set to `true` the\n *   notification banner will not be focussed when the page loads. This only\n *   applies if the component has a `role` of `alert` â€“ in other cases the\n *   component will not be focused on page load, regardless of this option.\n */\n"],"names":["mergeConfigs","configObjects","flattenObject","configObject","flattenedObject","flattenLoop","obj","prefix","key","value","Object","entries","prefixedKey","formattedConfigObject","isSupported","$scope","document","body","classList","contains","normaliseString","trimmedValue","trim","length","isFinite","Number","normaliseDataset","dataset","out","GOVUKFrontendError","Error","constructor","args","name","SupportError","ElementError","messageOrOptions","message","componentName","identifier","element","expectedType","GOVUKFrontendComponent","checkSupport","NotificationBanner","$module","config","HTMLElement","defaults","setFocus","disableAutoFocus","getAttribute","setAttribute","addEventListener","removeAttribute","focus","moduleName","freeze"],"mappings":"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"}