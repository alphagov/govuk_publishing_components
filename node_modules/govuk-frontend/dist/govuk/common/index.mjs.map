{"version":3,"file":"index.mjs","sources":["../../../src/govuk/common/index.mjs"],"sourcesContent":["/**\n * Common helpers which do not require polyfill.\n *\n * IMPORTANT: If a helper require a polyfill, please isolate it in its own module\n * so that the polyfill can be properly tree-shaken and does not burden\n * the components that do not need that helper\n */\n\n/**\n * Config flattening function\n *\n * Takes any number of objects, flattens them into namespaced key-value pairs,\n * (e.g. \\{'i18n.showSection': 'Show section'\\}) and combines them together, with\n * greatest priority on the LAST item passed in.\n *\n * @internal\n * @param {...{ [key: string]: unknown }} configObjects - Config object to merge\n * @returns {{ [key: string]: unknown }} A flattened object of key-value pairs.\n */\nexport function mergeConfigs(...configObjects) {\n  /**\n   * Function to take nested objects and flatten them to a dot-separated keyed\n   * object. Doing this means we don't need to do any deep/recursive merging of\n   * each of our objects, nor transform our dataset from a flat list into a\n   * nested object.\n   *\n   * @internal\n   * @param {{ [key: string]: unknown }} configObject - Deeply nested object\n   * @returns {{ [key: string]: unknown }} Flattened object with dot-separated keys\n   */\n  function flattenObject(configObject) {\n    // Prepare an empty return object\n    /** @type {{ [key: string]: unknown }} */\n    const flattenedObject = {}\n\n    /**\n     * Our flattening function, this is called recursively for each level of\n     * depth in the object. At each level we prepend the previous level names to\n     * the key using `prefix`.\n     *\n     * @internal\n     * @param {Partial<{ [key: string]: unknown }>} obj - Object to flatten\n     * @param {string} [prefix] - Optional dot-separated prefix\n     */\n    function flattenLoop(obj, prefix) {\n      for (const [key, value] of Object.entries(obj)) {\n        const prefixedKey = prefix ? `${prefix}.${key}` : key\n\n        // If the value is a nested object, recurse over that too\n        if (value && typeof value === 'object') {\n          flattenLoop(value, prefixedKey)\n        } else {\n          // Otherwise, add this value to our return object\n          flattenedObject[prefixedKey] = value\n        }\n      }\n    }\n\n    // Kick off the recursive loop\n    flattenLoop(configObject)\n    return flattenedObject\n  }\n\n  // Start with an empty object as our base\n  /** @type {{ [key: string]: unknown }} */\n  const formattedConfigObject = {}\n\n  // Loop through each of the passed objects\n  for (const configObject of configObjects) {\n    const obj = flattenObject(configObject)\n\n    // Push their keys one-by-one into formattedConfigObject. Any duplicate\n    // keys will override the existing key with the new value.\n    for (const [key, value] of Object.entries(obj)) {\n      formattedConfigObject[key] = value\n    }\n  }\n\n  return formattedConfigObject\n}\n\n/**\n * Extracts keys starting with a particular namespace from a flattened config\n * object, removing the namespace in the process.\n *\n * @internal\n * @param {{ [key: string]: unknown }} configObject - The object to extract key-value pairs from.\n * @param {string} namespace - The namespace to filter keys with.\n * @returns {{ [key: string]: unknown }} Flattened object with dot-separated key namespace removed\n */\nexport function extractConfigByNamespace(configObject, namespace) {\n  /** @type {{ [key: string]: unknown }} */\n  const newObject = {}\n\n  for (const [key, value] of Object.entries(configObject)) {\n    // Split the key into parts, using . as our namespace separator\n    const keyParts = key.split('.')\n\n    // Check if the first namespace matches the configured namespace\n    if (keyParts[0] === namespace) {\n      // Remove the first item (the namespace) from the parts array,\n      // but only if there is more than one part (we don't want blank keys!)\n      if (keyParts.length > 1) {\n        keyParts.shift()\n      }\n\n      // Join the remaining parts back together\n      const newKey = keyParts.join('.')\n\n      // Add them to our new object\n      newObject[newKey] = value\n    }\n  }\n\n  return newObject\n}\n\n/**\n * Get hash fragment from URL\n *\n * Extract the hash fragment (everything after the hash) from a URL,\n * but not including the hash symbol\n *\n * @private\n * @param {string} url - URL\n * @returns {string | undefined} Fragment from URL, without the hash\n */\nexport function getFragmentFromUrl(url) {\n  if (url.indexOf('#') === -1) {\n    return undefined\n  }\n\n  return url.split('#').pop()\n}\n\n/**\n * Checks if GOV.UK Frontend is supported on this page\n *\n * Some browsers will load and run our JavaScript but GOV.UK Frontend\n * won't be supported.\n *\n * @internal\n * @param {HTMLElement | null} [$scope] - HTML element `<body>` checked for browser support\n * @returns {boolean} Whether GOV.UK Frontend is supported on this page\n */\nexport function isSupported($scope = document.body) {\n  if (!$scope) {\n    return false\n  }\n\n  return $scope.classList.contains('govuk-frontend-supported')\n}\n\n/**\n * Validate component config by schema\n *\n * @internal\n * @param {Schema} schema - Config schema\n * @param {{ [key: string]: unknown }} config - Component config\n * @returns {string[]} List of validation errors\n */\nexport function validateConfig(schema, config) {\n  const validationErrors = []\n\n  // Check errors for each schema\n  for (const [name, conditions] of Object.entries(schema)) {\n    const errors = []\n\n    // Check errors for each schema condition\n    for (const { required, errorMessage } of conditions) {\n      if (!required.every((key) => !!config[key])) {\n        errors.push(errorMessage) // Missing config key value\n      }\n    }\n\n    // Check one condition passes or add errors\n    if (name === 'anyOf' && !(conditions.length - errors.length >= 1)) {\n      validationErrors.push(...errors)\n    }\n  }\n\n  return validationErrors\n}\n\n/**\n * Schema for component config\n *\n * @typedef {object} Schema\n * @property {SchemaCondition[]} [anyOf] - List of schema conditions\n */\n\n/**\n * Schema condition for component config\n *\n * @typedef {object} SchemaCondition\n * @property {string[]} required - List of required config fields\n * @property {string} errorMessage - Error message when required config fields not provided\n */\n"],"names":["mergeConfigs","configObjects","flattenObject","configObject","flattenedObject","flattenLoop","obj","prefix","key","value","Object","entries","prefixedKey","formattedConfigObject","extractConfigByNamespace","namespace","newObject","keyParts","split","length","shift","newKey","join","getFragmentFromUrl","url","indexOf","undefined","pop","isSupported","$scope","document","body","classList","contains","validateConfig","schema","config","validationErrors","name","conditions","errors","required","errorMessage","every","push"],"mappings":"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"}