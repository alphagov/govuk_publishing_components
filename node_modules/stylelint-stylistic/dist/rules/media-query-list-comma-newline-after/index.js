"use strict";
const { createPlugin } = require('stylelint');
const atRuleParamIndex = require('stylelint/lib/utils/atRuleParamIndex');
const ruleMessages = require('stylelint/lib/utils/ruleMessages');
const validateOptions = require('stylelint/lib/utils/validateOptions');
const whitespaceChecker = require('stylelint/lib/utils/whitespaceChecker');
const mediaQueryListCommaWhitespaceChecker = require('stylelint/lib/rules/mediaQueryListCommaWhitespaceChecker');
const ruleName = 'stylistic/media-query-list-comma-newline-after';
const messages = ruleMessages(ruleName, {
    expectedAfter: () => 'Expected newline after ","',
    expectedAfterMultiLine: () => 'Expected newline after "," in a multi-line list',
    rejectedAfterMultiLine: () => 'Unexpected whitespace after "," in a multi-line list',
});
const meta = {
    url: 'https://github.com/elirasza/stylelint-stylistic/tree/main/lib/rules/media-query-list-comma-newline-after',
    fixable: true,
};
const rule = (primary, _secondaryOptions, context) => {
    const checker = whitespaceChecker('newline', primary, messages);
    return (root, result) => {
        const validOptions = validateOptions(result, ruleName, {
            actual: primary,
            possible: ['always', 'always-multi-line', 'never-multi-line'],
        });
        if (!validOptions) {
            return;
        }
        let fixData;
        mediaQueryListCommaWhitespaceChecker({
            root,
            result,
            locationChecker: checker.afterOneOnly,
            checkedRuleName: ruleName,
            allowTrailingComments: primary.startsWith('always'),
            fix: context.fix
                ? (atRule, index) => {
                    const paramCommaIndex = index - atRuleParamIndex(atRule);
                    fixData = fixData || new Map();
                    const commaIndices = fixData.get(atRule) || [];
                    commaIndices.push(paramCommaIndex);
                    fixData.set(atRule, commaIndices);
                    return true;
                }
                : null,
        });
        if (fixData) {
            for (const [atRule, commaIndices] of fixData.entries()) {
                let params = atRule.raws.params ? atRule.raws.params.raw : atRule.params;
                for (const index of commaIndices.sort((a, b) => b - a)) {
                    const beforeComma = params.slice(0, index + 1);
                    const afterComma = params.slice(index + 1);
                    if (primary.startsWith('always')) {
                        params = /^\s*\n/.test(afterComma)
                            ? beforeComma + afterComma.replace(/^[^\S\r\n]*/, '')
                            : beforeComma + context.newline + afterComma;
                    }
                    else if (primary.startsWith('never')) {
                        params = beforeComma + afterComma.replace(/^\s*/, '');
                    }
                }
                if (atRule.raws.params) {
                    atRule.raws.params.raw = params;
                }
                else {
                    atRule.params = params;
                }
            }
        }
    };
};
rule.ruleName = ruleName;
rule.messages = messages;
rule.meta = meta;
module.exports = { messages, meta, plugin: createPlugin(ruleName, rule), rule, ruleName };
