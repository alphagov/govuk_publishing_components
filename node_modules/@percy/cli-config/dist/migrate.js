"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.migrate = exports.default = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _cliCommand = _interopRequireDefault(require("@percy/cli-command"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const migrate = (0, _cliCommand.default)('migrate', {
  description: 'Migrate a Percy config file to the latest version',
  args: [{
    name: 'filepath',
    description: 'Current config filepath, detected by default'
  }, {
    name: 'output',
    description: 'New config filepath to write to, defaults to \'filepath\''
  }],
  flags: [{
    name: 'dry-run',
    description: 'Print the new config without writing it',
    short: 'd'
  }],
  examples: ['$0', '$0 --dry-run', '$0 ./config/percy.yml', '$0 .percy.yml .percy.js']
}, async ({
  args,
  flags,
  log,
  exit
}) => {
  let PercyConfig = await Promise.resolve().then(() => _interopRequireWildcard(require('@percy/config')));
  let {
    config,
    filepath: input
  } = PercyConfig.search(args.filepath);
  let output = args.output ? _path.default.resolve(args.output) : input;
  if (!config) exit(1, 'Config file not found');
  log.info(`Found config file: ${_path.default.relative('', input)}`); // if migrating versions, warn when latest

  if (input === output && config.version === 2) {
    exit(0, 'Config is already the latest version');
  } // migrate config


  log.info('Migrating config file...');
  let format = _path.default.extname(output).replace(/^./, '') || 'yaml';
  let migrated = PercyConfig.migrate(config); // prefer kebab-case for yaml

  if (/^ya?ml$/.test(format)) {
    migrated = PercyConfig.normalize(migrated, {
      schema: '/config',
      kebab: true
    });
  } // stringify to the desired format


  let body = PercyConfig.stringify(format, migrated);

  if (!flags.dryRun) {
    let content = body;

    if (_path.default.basename(output) === 'package.json') {
      // update the package.json entry by reading and modifying it
      let pkg = JSON.parse(_fs.default.readFileSync(output));
      content = PercyConfig.stringify(format, { ...pkg,
        percy: migrated
      });
    } else if (input === output) {
      // rename input if it is the output
      let old = input.replace(_path.default.extname(input), '.old$&');

      _fs.default.renameSync(input, old);
    } // write to output


    _fs.default.writeFileSync(output, content);
  }

  log.info('Config file migrated!'); // when dry-running, print config to stdout when finished

  if (flags.dryRun) {
    log.stdout.write('\n' + body);
  }
});
exports.migrate = migrate;
var _default = migrate;
exports.default = _default;