"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validate = exports.default = void 0;

var _cliCommand = _interopRequireDefault(require("@percy/cli-command"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const validate = (0, _cliCommand.default)('validate', {
  description: 'Validate a Percy config file',
  args: [{
    name: 'filepath',
    description: 'Config filepath, detected by default'
  }],
  examples: ['$0', '$0 ./config/percy.yml']
}, async ({
  args,
  log,
  exit
}) => {
  let PercyConfig = await Promise.resolve().then(() => _interopRequireWildcard(require('@percy/config'))); // verify a config file can be located

  let {
    config,
    filepath
  } = PercyConfig.search(args.filepath);
  if (!config) exit(1, 'Config file not found'); // when `bail` is true, .load() returns undefined when validation fails

  let result = PercyConfig.load({
    path: filepath,
    print: true,
    bail: true
  }); // exit 1 when config is empty

  if (!result) exit(1);
});
exports.validate = validate;
var _default = validate;
exports.default = _default;