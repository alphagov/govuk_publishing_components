"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.commonSchema = void 0;
exports.configMigration = configMigration;
exports.snapshotsFileSchema = exports.configSchema = void 0;

var _config = require("@percy/core/dist/config");

// Common schemas referenced by other schemas
const commonSchema = {
  $id: '/snapshot/cli',
  $refs: {
    predicate: {
      oneOf: [{
        type: 'string'
      }, {
        instanceof: 'RegExp'
      }, {
        instanceof: 'Function'
      }, {
        type: 'array',
        items: {
          $ref: '#/$refs/predicate'
        }
      }]
    }
  }
}; // Config schema for static directories

exports.commonSchema = commonSchema;
const configSchema = {
  static: {
    type: 'object',
    additionalProperties: false,
    properties: {
      baseUrl: {
        type: 'string',
        pattern: '^/',
        errors: {
          pattern: 'must start with a forward slash (/)'
        }
      },
      include: {
        $ref: '/snapshot/cli#/$refs/predicate'
      },
      exclude: {
        $ref: '/snapshot/cli#/$refs/predicate'
      },
      cleanUrls: {
        type: 'boolean',
        default: false
      },
      rewrites: {
        type: 'object',
        normalize: false,
        additionalProperties: {
          type: 'string'
        }
      },
      overrides: {
        type: 'array',
        items: {
          type: 'object',
          additionalProperties: false,
          properties: {
            include: {
              $ref: '/snapshot/cli#/$refs/predicate'
            },
            exclude: {
              $ref: '/snapshot/cli#/$refs/predicate'
            },
            // schemas have no concept of inheritance, but we can leverage JS for brevity
            ..._config.snapshotSchema.properties
          }
        }
      }
    }
  },
  sitemap: {
    type: 'object',
    additionalProperties: false,
    properties: {
      include: {
        $ref: '/snapshot/cli#/$refs/predicate'
      },
      exclude: {
        $ref: '/snapshot/cli#/$refs/predicate'
      },
      overrides: {
        $ref: '/config/static#/properties/overrides'
      }
    }
  }
}; // Snapshots file schema

exports.configSchema = configSchema;
const snapshotsFileSchema = {
  $id: '/snapshot/file',
  oneOf: [{
    type: 'array',
    items: {
      oneOf: [{
        $ref: '/snapshot'
      }, {
        type: 'string'
      }]
    }
  }, {
    type: 'object',
    required: ['snapshots'],
    properties: {
      baseUrl: {
        type: 'string',
        pattern: '^https?://',
        errors: {
          pattern: 'must include with a protocol and hostname'
        }
      },
      include: {
        $ref: '/snapshot/cli#/$refs/predicate'
      },
      exclude: {
        $ref: '/snapshot/cli#/$refs/predicate'
      },
      snapshots: {
        $ref: '#/oneOf/0'
      }
    }
  }]
};
exports.snapshotsFileSchema = snapshotsFileSchema;

function configMigration(config, util) {
  /* eslint-disable curly */
  if (config.version < 2) {
    // static-snapshots and options were renamed
    util.map('staticSnapshots.baseUrl', 'static.baseUrl');
    util.map('staticSnapshots.snapshotFiles', 'static.include');
    util.map('staticSnapshots.ignoreFiles', 'static.exclude');
    util.del('staticSnapshots');
  } else {
    let notice = {
      type: 'config',
      until: '1.0.0'
    }; // static files and ignore options were renamed

    util.deprecate('static.files', {
      map: 'static.include',
      ...notice
    });
    util.deprecate('static.ignore', {
      map: 'static.exclude',
      ...notice
    });

    for (let i in ((_config$static = config.static) === null || _config$static === void 0 ? void 0 : _config$static.overrides) || []) {
      var _config$static;

      let k = `static.overrides[${i}]`;
      util.deprecate(`${k}.files`, {
        map: `${k}.include`,
        ...notice
      });
      util.deprecate(`${k}.ignore`, {
        map: `${k}.exclude`,
        ...notice
      });
    }
  }
}