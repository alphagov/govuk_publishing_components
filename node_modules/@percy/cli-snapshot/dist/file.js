"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadSnapshotsFile = loadSnapshotsFile;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _config = _interopRequireDefault(require("@percy/config"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// Loads snapshots from a js, json, or yaml file.
async function loadSnapshotsFile(file, flags, invalid) {
  var _PercyConfig$validate;

  let ext = _path.default.extname(file);

  let config = {}; // load snapshots file

  if (ext === '.js') {
    ({
      default: config
    } = await Promise.resolve(`${_path.default.resolve(file)}`).then(s => _interopRequireWildcard(require(s))));
    if (typeof config === 'function') config = await config();
  } else if (ext === '.json') {
    config = JSON.parse(_fs.default.readFileSync(file, {
      encoding: 'utf-8'
    }));
  } else if (ext.match(/\.ya?ml$/)) {
    let YAML = await Promise.resolve().then(() => _interopRequireWildcard(require('yaml')));
    config = YAML.parse(_fs.default.readFileSync(file, {
      encoding: 'utf-8'
    }));
  } else {
    throw new Error(`Unsupported filetype: ${file}`);
  } // validate base-url before config options


  if (flags.baseUrl && !flags.baseUrl.startsWith('http')) {
    throw new Error('The base-url must include a protocol ' + 'and hostname when providing a list of snapshots');
  } // validate snapshot config options


  (_PercyConfig$validate = _config.default.validate(config, '/snapshot/file')) === null || _PercyConfig$validate === void 0 ? void 0 : _PercyConfig$validate.forEach(invalid); // flags override config options

  let {
    baseUrl,
    include,
    exclude
  } = { ...config,
    ...flags
  }; // support config that only contains a list of snapshots

  return (Array.isArray(config) ? config : config.snapshots || []).reduce((snapshots, snap) => {
    // reduce matching snapshots with default options
    snap = (0, _utils.withDefaults)(snap, {
      host: baseUrl
    });
    return (0, _utils.snapshotMatches)(snap, include, exclude) ? snapshots.concat(snap) : snapshots;
  }, []);
}