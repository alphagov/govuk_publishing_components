"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addMigration = addMigration;
exports.clearMigrations = clearMigrations;
exports.default = void 0;
exports.migrate = migrate;

var _logger = _interopRequireDefault(require("@percy/logger"));

var _normalize2 = _interopRequireDefault(require("./normalize"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Global set of registered migrations
const migrations = new Map(); // Register a migration function for the main config schema by default

function addMigration(migration, schema = '/config') {
  if (Array.isArray(migration)) {
    // accept schema as the first item in a tuple
    if (typeof migration[0] === 'string') [schema, ...migration] = migration;
    return migration.map(m => addMigration(m, schema));
  }

  if (!migrations.has(schema)) migrations.set(schema, []);
  migrations.get(schema).unshift(migration);
  return migration;
} // Clear all migration functions


function clearMigrations() {
  migrations.clear();
  addMigration(defaultMigration);
} // The default config migration


addMigration(defaultMigration);

function defaultMigration(config, {
  set
}) {
  if (config.version !== 2) set('version', 2);
} // Migrate util for deprecated options


function deprecate(config, log, path, options) {
  if ((0, _utils.get)(config, path) == null) return;
  let {
    type,
    until: ver,
    map: to,
    alt,
    warn
  } = options;
  let name = (0, _utils.joinPropertyPath)(path);
  let message = 'The ' + [type ? `${type} option \`${name}\`` : `\`${name}\` option`, `will be removed in ${ver || 'a future release'}.`, to ? `Use \`${to}\` instead.` : alt || ''].join(' ').trim();
  if (warn) log.warn(`Warning: ${message}`);else log.deprecated(message);
  return to ? (0, _utils.map)(config, path, to) : config;
} // Calls each registered migration function with a normalize provided config
// and util functions for working with the config object


function migrate(config, schema = '/config') {
  var _normalize;

  config = (_normalize = (0, _normalize2.default)(config, {
    schema
  })) !== null && _normalize !== void 0 ? _normalize : {};

  if (migrations.has(schema)) {
    let log = (0, _logger.default)('config');
    let util = {
      deprecate: deprecate.bind(null, config, log),
      set: _utils.set.bind(null, config),
      map: _utils.map.bind(null, config),
      del: _utils.del.bind(null, config),
      log
    };

    for (let migration of migrations.get(schema)) {
      migration(config, util);
    } // normalize again to adjust for migrations


    config = (0, _normalize2.default)(config, {
      schema
    });
  }

  return config;
}

var _default = migrate;
exports.default = _default;