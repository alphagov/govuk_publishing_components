"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.camelcase = camelcase;
exports.default = void 0;
exports.kebabcase = kebabcase;
exports.normalize = normalize;

var _validate = require("./validate");

var _utils = require("./utils");

// Edge case camelizations
const CAMELCASE_MAP = new Map([['css', 'CSS'], ['javascript', 'JavaScript']]); // Converts kebab-cased and snake_cased strings to camelCase.

const KEBAB_SNAKE_REG = /[-_]([^-_]+)/g;

function camelcase(str) {
  if (typeof str !== 'string') return str;
  return str.replace(KEBAB_SNAKE_REG, (match, word) => CAMELCASE_MAP.get(word) || word[0].toUpperCase() + word.slice(1));
} // Coverts camelCased and snake_cased strings to kebab-case.


const CAMEL_SNAKE_REG = /([a-z])([A-Z]+)|_([^_]+)/g;

function kebabcase(str) {
  if (typeof str !== 'string') return str;
  return Array.from(CAMELCASE_MAP).reduce((str, [word, camel]) => str.replace(camel, `-${word}`), str).replace(CAMEL_SNAKE_REG, (match, p, n, w) => `${p || ''}-${(n || w).toLowerCase()}`);
} // Removes undefined empty values and renames kebab-case properties to camelCase. Optionally
// allows deep merging with options.overrides, converting keys to kebab-case with options.kebab,
// and normalizing against a schema with options.schema.


function normalize(object, options) {
  let keycase = options !== null && options !== void 0 && options.kebab ? kebabcase : camelcase;
  return (0, _utils.merge)([object, options === null || options === void 0 ? void 0 : options.overrides], path => {
    var _schemas$shift;

    let schemas = (0, _validate.getSchema)(options === null || options === void 0 ? void 0 : options.schema, path.map(camelcase));
    let skip = ((_schemas$shift = schemas.shift()) === null || _schemas$shift === void 0 ? void 0 : _schemas$shift.normalize) === false;
    path = path.map((k, i) => {
      var _schemas$i;

      if (skip) return k;
      skip || (skip = ((_schemas$i = schemas[i]) === null || _schemas$i === void 0 ? void 0 : _schemas$i.normalize) === false);
      return keycase(k);
    });
    return [path];
  });
}

var _default = normalize;
exports.default = _default;