"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stop = exports.default = void 0;

var _cliCommand = _interopRequireDefault(require("@percy/cli-command"));

var common = _interopRequireWildcard(require("./common"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const stop = (0, _cliCommand.default)('stop', {
  description: 'Stops a local running Percy snapshot server',
  flags: common.flags,
  percy: true
}, async ({
  flags,
  percy,
  log,
  exit
}) => {
  if (!percy) exit(0, 'Percy is disabled');
  let {
    request
  } = await Promise.resolve().then(() => _interopRequireWildcard(require('@percy/core/dist/utils')));
  let stop = `http://localhost:${flags.port}/percy/stop`;
  let ping = `http://localhost:${flags.port}/percy/healthcheck`;

  try {
    await request(stop, {
      method: 'POST',
      noProxy: true
    });
  } catch (err) {
    log.error('Percy is not running');
    log.debug(err);
    exit(1);
  } // retry heathcheck until it fails


  await new Promise(function check(resolve) {
    return request(ping, {
      noProxy: true
    }).then(() => setTimeout(check, 100, resolve)).catch(resolve);
  });
  log.info('Percy has stopped');
});
exports.stop = stop;
var _default = stop;
exports.default = _default;