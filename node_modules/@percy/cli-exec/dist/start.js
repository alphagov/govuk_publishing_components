"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.start = exports.default = void 0;

var _cliCommand = _interopRequireDefault(require("@percy/cli-command"));

var common = _interopRequireWildcard(require("./common"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const start = (0, _cliCommand.default)('start', {
  description: 'Starts a local Percy snapshot server',
  flags: common.flags,
  examples: ['$0 &> percy.log'],
  percy: {
    server: true
  }
}, async function* ({
  percy,
  exit
}) {
  if (!percy) exit(0, 'Percy is disabled'); // start percy

  yield* percy.start();

  try {
    // run until stopped or terminated
    while (percy.readyState < 3) {
      yield new Promise(r => setImmediate(r));
    }
  } catch (error) {
    await percy.stop(true);
    throw error;
  }
});
exports.start = start;
var _default = start;
exports.default = _default;