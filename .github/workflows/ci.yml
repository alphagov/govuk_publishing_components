name: Continuous integration
on: [push, pull_request]

jobs:
  # This matrix job runs the test suite against multiple Ruby versions
  test_matrix:
    strategy:
      fail-fast: false
      matrix:
        # Due to https://github.com/actions/runner/issues/849, we have to use quotes for '3.0'
        ruby: [2.7, '3.0', 3.1]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    # Clone the govuk-content-schemas repo, a dependency of the govuk_schemas gem
    # Make it available at ../govuk-content-schemas, which is where govuk_schemas expects it to be
    - run: git clone -b deployed-to-production --single-branch https://github.com/alphagov/govuk-content-schemas ../govuk-content-schemas

    - uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ matrix.ruby }}
        bundler-cache: true
        cache-version: 1
    - uses: actions/setup-node@v3.1.0
      with:
        node-version: lts/* # use the latest LTS release
        cache: yarn
    - run: yarn install
    - run: bundle exec rake

  # This job is needed to work around the fact that matrix jobs spawn multiple status checks â€“ i.e. one job per variant.
  # The branch protection rules depend on this as a composite job to ensure that all preceding test_matrix checks passed.
  # Solution taken from: https://github.community/t/status-check-for-a-matrix-jobs/127354/3
  test:
    needs: test_matrix
    runs-on: ubuntu-latest
    steps:
      - run: echo "All matrix tests have passed ðŸš€"

  release:
    needs: test
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v3
    - uses: ruby/setup-ruby@v1
      with:
        rubygems: latest
    - uses: actions/setup-node@v3.1.0
      with:
        node-version: lts/* # use the latest LTS release
    - run: yarn install
    - env:
        GEM_HOST_API_KEY: ${{ secrets.ALPHAGOV_RUBYGEMS_API_KEY }}
      run: |
        VERSION=$(ruby -e "puts eval(File.read('govuk_publishing_components.gemspec')).version")
        GEM_VERSION=$(gem list --exact --remote govuk_publishing_components)

        if [ "${GEM_VERSION}" != "govuk_publishing_components (${VERSION})" ]; then
          gem build govuk_publishing_components.gemspec
          gem push "govuk_publishing_components-${VERSION}.gem"
        fi

        if ! git ls-remote --tags --exit-code origin v${VERSION}; then
          git tag v${VERSION}
          git push --tags
        fi
